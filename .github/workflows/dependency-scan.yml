name: Dependency Scan

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/requirements.txt'
      - 'src/backend/pyproject.toml'
      - 'src/web/package.json'
      - 'src/web/electron/package.json'
      - 'src/web/react-native/package.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/requirements.txt'
      - 'src/backend/pyproject.toml'
      - 'src/web/package.json'
      - 'src/web/electron/package.json'
      - 'src/web/react-native/package.json'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PNPM_VERSION: '8.6.0'

jobs:
  scan-python-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: cd src/backend && poetry install

      - name: Run Safety check
        run: cd src/backend && poetry run safety check --full-report --output text

      - name: Run pip-audit
        run: cd src/backend && poetry run pip-audit

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'personal-ai-agent-backend'
          path: 'src/backend'
          format: 'HTML'
          out: 'reports/backend-dependency-check'

      - name: Upload Python dependency report
        uses: actions/upload-artifact@v3
        with:
          name: python-dependency-report
          path: reports/backend-dependency-check

  scan-javascript-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install web dependencies
        run: cd src/web && pnpm install

      - name: Run npm audit
        run: cd src/web && pnpm audit --audit-level=high
        continue-on-error: true

      - name: Install electron dependencies
        run: cd src/web/electron && pnpm install

      - name: Run npm audit for electron
        run: cd src/web/electron && pnpm audit --audit-level=high
        continue-on-error: true

      - name: Install react-native dependencies
        run: cd src/web/react-native && npm install

      - name: Run npm audit for react-native
        run: cd src/web/react-native && npm audit --audit-level=high
        continue-on-error: true

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'personal-ai-agent-frontend'
          path: 'src/web'
          format: 'HTML'
          out: 'reports/frontend-dependency-check'

      - name: Upload JavaScript dependency report
        uses: actions/upload-artifact@v3
        with:
          name: javascript-dependency-report
          path: reports/frontend-dependency-check

  analyze-vulnerabilities:
    runs-on: ubuntu-latest
    needs: [scan-python-dependencies, scan-javascript-dependencies]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Python dependency report
        uses: actions/download-artifact@v3
        with:
          name: python-dependency-report
          path: reports/backend-dependency-check

      - name: Download JavaScript dependency report
        uses: actions/download-artifact@v3
        with:
          name: javascript-dependency-report
          path: reports/frontend-dependency-check

      - name: Parse vulnerability reports
        id: parse-reports
        run: python .github/scripts/parse_dependency_reports.py --backend-report reports/backend-dependency-check/dependency-check-report.xml --frontend-report reports/frontend-dependency-check/dependency-check-report.xml --output-file vulnerability-summary.json

      - name: Create GitHub issues for critical vulnerabilities
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const vulnerabilities = JSON.parse(fs.readFileSync('vulnerability-summary.json', 'utf8'));
            const criticalVulnerabilities = vulnerabilities.filter(v => v.severity === 'CRITICAL');
            
            for (const vuln of criticalVulnerabilities) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Alert: ${vuln.name} ${vuln.version} has a critical vulnerability`,
                body: `## Vulnerability Details\n\n- **Package**: ${vuln.name}\n- **Version**: ${vuln.version}\n- **Severity**: ${vuln.severity}\n- **CVSS Score**: ${vuln.cvssScore}\n- **CWE**: ${vuln.cwe}\n\n## Description\n\n${vuln.description}\n\n## Recommendation\n\nUpdate to version ${vuln.fixedVersion || 'latest'} or apply the recommended patch.\n\n## References\n\n${vuln.references.map(ref => `- [${ref.name}](${ref.url})`).join('\n')}\n\nThis issue was automatically created by the dependency scanning workflow.`,
                labels: ['security', 'vulnerability', 'critical']
              });
            }

      - name: Generate vulnerability summary
        run: python .github/scripts/generate_vulnerability_summary.py --input-file vulnerability-summary.json --output-file vulnerability-summary.md

      - name: Upload vulnerability summary
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-summary
          path: vulnerability-summary.md

      - name: Post vulnerability summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('vulnerability-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  check-license-compliance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check JavaScript licenses
        run: cd src/web && license-checker --json --out licenses.json

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check Python licenses
        run: cd src/backend && pip-licenses --format=json --with-urls --with-description --output-file=licenses.json

      - name: Analyze license compliance
        run: python .github/scripts/analyze_licenses.py --js-licenses src/web/licenses.json --py-licenses src/backend/licenses.json --allowed-licenses MIT,Apache-2.0,BSD-3-Clause,BSD-2-Clause,ISC,0BSD,CC0-1.0 --output-file license-compliance.md

      - name: Upload license compliance report
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance-report
          path: license-compliance.md

      - name: Post license compliance comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('license-compliance.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  dependency-scan-summary:
    runs-on: ubuntu-latest
    needs: [analyze-vulnerabilities, check-license-compliance]
    if: always()
    steps:
      - name: Download vulnerability summary
        uses: actions/download-artifact@v3
        with:
          name: vulnerability-summary

      - name: Download license compliance report
        uses: actions/download-artifact@v3
        with:
          name: license-compliance-report

      - name: Generate scan summary
        run: |
          echo '# Dependency Scan Summary' > scan-summary.md
          echo '' >> scan-summary.md
          echo '## Scan Status' >> scan-summary.md
          echo '- Python Dependencies: ${{ needs.scan-python-dependencies.result == "success" && "✅ Success" || "❌ Failed" }}' >> scan-summary.md
          echo '- JavaScript Dependencies: ${{ needs.scan-javascript-dependencies.result == "success" && "✅ Success" || "❌ Failed" }}' >> scan-summary.md
          echo '- Vulnerability Analysis: ${{ needs.analyze-vulnerabilities.result == "success" && "✅ Success" || "❌ Failed" }}' >> scan-summary.md
          echo '- License Compliance: ${{ needs.check-license-compliance.result == "success" && "✅ Success" || "❌ Failed" }}' >> scan-summary.md
          echo '' >> scan-summary.md
          cat vulnerability-summary.md >> scan-summary.md
          echo '' >> scan-summary.md
          cat license-compliance.md >> scan-summary.md

      - name: Upload scan summary
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-summary
          path: scan-summary.md

      - name: Post scan summary
        if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && (needs.analyze-vulnerabilities.result == 'failure' || needs.check-license-compliance.result == 'failure'))
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('scan-summary.md', 'utf8');
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Dependency Scan Summary - ${new Date().toISOString().split('T')[0]}`,
              body: summary,
              labels: ['security', 'dependencies', 'report']
            });