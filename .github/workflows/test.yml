name: Test

on:
  push:
    branches: 
      - main
      - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  pull_request:
    branches: 
      - main
      - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE.md'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PNPM_VERSION: '8.6.0'

jobs:
  backend-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Install dependencies
        run: cd src/backend && poetry install
      
      - name: Run unit tests
        run: cd src/backend && poetry run pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: src/backend/coverage.xml
          flags: backend,unittests
          name: backend-unit-tests

  backend-integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Install dependencies
        run: cd src/backend && poetry install
      
      - name: Run integration tests
        run: cd src/backend && poetry run pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=term
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: src/backend/coverage.xml
          flags: backend,integrationtests
          name: backend-integration-tests

  frontend-unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: cd src/web && pnpm install
      
      - name: Run unit tests
        run: cd src/web && pnpm test -- --coverage
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: src/web/coverage/coverage-final.json
          flags: frontend,unittests
          name: frontend-unit-tests

  frontend-e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-integration-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Install backend dependencies
        run: cd src/backend && poetry install
      
      - name: Install frontend dependencies
        run: cd src/web && pnpm install
      
      - name: Start backend server
        run: cd src/backend && poetry run python main.py &
        env:
          TESTING: 'true'
          DATABASE_PATH: ':memory:'
          VECTOR_DB_PATH: './test_vector_db'
      
      - name: Build frontend
        run: cd src/web && pnpm build
      
      - name: Start frontend server
        run: cd src/web && pnpm start &
      
      - name: Wait for servers to start
        run: sleep 10
      
      - name: Run Cypress tests
        run: cd src/web && pnpm cypress:run
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: src/web/cypress/screenshots
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: src/web/cypress/videos

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      
      - name: Install dependencies
        run: cd src/backend && poetry install
      
      - name: Install k6
        run: curl -L https://github.com/grafana/k6/releases/download/v0.42.0/k6-v0.42.0-linux-amd64.tar.gz | tar xz && sudo cp k6-v0.42.0-linux-amd64/k6 /usr/local/bin
      
      - name: Start backend server
        run: cd src/backend && poetry run python main.py &
        env:
          TESTING: 'true'
          DATABASE_PATH: ':memory:'
          VECTOR_DB_PATH: './test_vector_db'
      
      - name: Wait for server to start
        run: sleep 5
      
      - name: Run performance tests
        run: cd src/backend/tests/performance && k6 run api_performance.js
      
      - name: Run memory retrieval benchmark
        run: cd src/backend && poetry run python -m pytest tests/performance/test_memory_retrieval.py -v
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: src/backend/tests/performance/results/

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: cd src/web && pnpm install
      
      - name: Build frontend
        run: cd src/web && pnpm build
      
      - name: Start frontend server
        run: cd src/web && pnpm start &
      
      - name: Wait for server to start
        run: sleep 5
      
      - name: Run accessibility tests
        run: cd src/web && pnpm test:a11y
      
      - name: Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: src/web/a11y-report/

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, frontend-unit-tests, frontend-e2e-tests, performance-tests, accessibility-tests]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo '# Test Summary' > test-summary.md
          echo '' >> test-summary.md
          echo '## Backend Tests' >> test-summary.md
          echo '- Unit Tests: ${{ needs.backend-unit-tests.result == "success" && "✅ Success" || "❌ Failed" }}' >> test-summary.md
          echo '- Integration Tests: ${{ needs.backend-integration-tests.result == "success" && "✅ Success" || "❌ Failed" }}' >> test-summary.md
          echo '' >> test-summary.md
          echo '## Frontend Tests' >> test-summary.md
          echo '- Unit Tests: ${{ needs.frontend-unit-tests.result == "success" && "✅ Success" || "❌ Failed" }}' >> test-summary.md
          echo '- E2E Tests: ${{ needs.frontend-e2e-tests.result == "success" && "✅ Success" || "❌ Failed" }}' >> test-summary.md
          echo '' >> test-summary.md
          echo '## Additional Tests' >> test-summary.md
          echo '- Performance Tests: ${{ needs.performance-tests.result == "success" && "✅ Success" || needs.performance-tests.result == "skipped" && "⏭️ Skipped" || "❌ Failed" }}' >> test-summary.md
          echo '- Accessibility Tests: ${{ needs.accessibility-tests.result == "success" && "✅ Success" || needs.accessibility-tests.result == "skipped" && "⏭️ Skipped" || "❌ Failed" }}' >> test-summary.md
          echo '' >> test-summary.md
          echo 'Test artifacts are available as workflow artifacts.' >> test-summary.md
      
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test-summary.md
      
      - name: Post summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });